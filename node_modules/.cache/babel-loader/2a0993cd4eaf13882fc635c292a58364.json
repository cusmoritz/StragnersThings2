{"ast":null,"code":"const BaseURL = 'https://strangers-things.herokuapp.com/api/2207-ftb-et-web-pt/';\nexport const createNewUser = async (username, password) => {\n  try {\n    let response = await fetch(`${BaseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    }).then(results => results.json());\n    console.log(\"WE CREATED A NEW USER\", response);\n    return response.data.token;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getLoginUser = async (username, password) => {\n  try {\n    let response = await fetch(`${BaseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    }).then(result => result.json());\n    console.log(\"THIS IS LOGGING IN ALREADY\", response);\n    return response.data.token;\n  } catch (error) {\n    console.log(\"DIDNT LOG IN RIGHT\", error);\n  }\n};\nexport const getAPIPosts = async () => {\n  try {\n    const response = await fetch(`${BaseURL}posts`).then(results => results.json());\n    console.log(response.data.posts);\n    return response.data.posts;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["BaseURL","createNewUser","username","password","response","fetch","method","headers","body","JSON","stringify","user","then","results","json","console","log","data","token","error","getLoginUser","result","getAPIPosts","posts"],"sources":["/Users/marcus/Documents/fullstack/StrangersThings2/src/api.js"],"sourcesContent":["const BaseURL = 'https://strangers-things.herokuapp.com/api/2207-ftb-et-web-pt/'\n\nexport const createNewUser = async(username, password) => {\n    try {\n        let response = await fetch(`${BaseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user: {\n                username: username,\n                password: password\n            }\n      })\n        }).then(results => results.json())\n    console.log(\"WE CREATED A NEW USER\", response)\n    return response.data.token\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport const getLoginUser = async(username, password) => {\n    try {\n        let response = await fetch(`${BaseURL}/users/login`, {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user: {\n                username: username,\n                password: password\n              }\n            })\n            }).then(result => result.json())\n        console.log(\"THIS IS LOGGING IN ALREADY\", response)\n        return response.data.token\n    } catch (error) {\n        console.log(\"DIDNT LOG IN RIGHT\", error)\n    }\n}\n\nexport const getAPIPosts = async() => {\n    try {\n        const response = await fetch(`${BaseURL}posts`).then(results => results.json())\n        console.log(response.data.posts)\n        return (response.data.posts)\n    } catch (error) {\n        console.log(error)\n    }\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gEAAgE;AAEhF,OAAO,MAAMC,aAAa,GAAG,OAAMC,QAAQ,EAAEC,QAAQ,KAAK;EACtD,IAAI;IACA,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,iBAAgB,EAAE;MACpDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACT,cAAc,EAAE;MAChB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAE;UACNT,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACd;MACN,CAAC;IACC,CAAC,CAAC,CAACS,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC;IACtCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEZ,QAAQ,CAAC;IAC9C,OAAOA,QAAQ,CAACa,IAAI,CAACC,KAAK;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EACtB;AAEJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,OAAMlB,QAAQ,EAAEC,QAAQ,KAAK;EACrD,IAAI;IACA,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,cAAa,EAAE;MACjDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJT,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACD,CAAC,CAAC,CAACS,IAAI,CAACS,MAAM,IAAIA,MAAM,CAACP,IAAI,EAAE,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEZ,QAAQ,CAAC;IACnD,OAAOA,QAAQ,CAACa,IAAI,CAACC,KAAK;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEG,KAAK,CAAC;EAC5C;AACJ,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,YAAW;EAClC,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,OAAM,CAAC,CAACY,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC;IAC/EC,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAACa,IAAI,CAACM,KAAK,CAAC;IAChC,OAAQnB,QAAQ,CAACa,IAAI,CAACM,KAAK;EAC/B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}